//! SeaORM Entity. Generated by sea-orm-codegen 0.9.2
use serde::{Serialize, Deserialize};
use sea_orm::entity::prelude::*;


#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "clip")]
#[serde(rename_all = "camelCase")]
pub struct Model {
    #[sea_orm(primary_key)]
    // #[serde(skip_deserializing)] // Skip deserializing
    #[serde(rename = "clip_id")]
    pub clip_id: i32,
    pub g_maps_link: Option<String>,
    pub name: Option<String>,
    pub group: Option<String>,
    pub videotext: Option<String>,
    pub latlong: Option<String>,
    pub start: Option<i32>,
    pub stop: Option<i32>,
    pub streetview_video: Option<String>,
    pub is_renderd: Option<String>,
    pub is_uploaded_yt: Option<String>,
    pub is_uploaded_tik_tok: Option<String>,
    pub is_uploaded_instagram: Option<String>,
    pub ymusic_id: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        panic!("No RelationDef")
    }
}

impl ActiveModelBehavior for ActiveModel {}
